---
import { formatDate } from "@assets/format";
import Layout from "@layouts/Layout.astro";
import { Image } from "astro:assets";

const { id } = Astro.params;

interface icons {
  facebook: string;
  x: string;
  correo: string;
  linkedin: string;
  otro: string;
}

const miembro: {
  response: {
    nombreCompleto: string;
    puesto: string;
    imgPerfil: string;
    bio: string;
    resumen: string;
    gradoEstudio: string;
    tipoMiembro: "lider" | "miembro";
    proyectos: {
      clave: string;
      titulo: string;
      fechaInicio: string;
      fechaTermino: string;
    }[];
    contactos: { tipo: string; url: string }[];
  };
} = await fetch(
  `http://localhost:4321/api/miembros?idmiembro=${id}&includeProyectos=true`
).then((res) => res.json());

const getMiembro = async (id: number) => {
  if (id) {
    const response = await fetch(
      `http://localhost:4321/api/miembros?idmiembro=${id}`
    ).then((res) => res.json());

    return response.response.nombreCompleto;
  }
  return "";
};

const redesSocialesIcon: icons = {
  facebook: "bi bi-facebook",
  x: "bi bi-twitter-x",
  correo: "bi bi-envelope-fill",
  linkedin: "bi bi-linkedin",
  otro: "bi bi-link-45deg",
};

if (!miembro || miembro.hasOwnProperty("msg")) {
  return Astro.redirect("/404");
}

const getCollabs = (element: {
  otrosColaboradores: string | null;
  miembros: {
    nombreCompleto: string;
    nombre: string;
    apepat: string;
    apemat: string;
  }[];
}): string => {
  const formatter = new Intl.ListFormat("es", {
    type: "conjunction",
    style: "long",
  });
  const miembrosF: string[] = [];

  element.miembros.forEach((el) => {
    miembrosF.push(el.nombreCompleto);
  });

  if (element.otrosColaboradores) {
    const otherCollabsArr: string[] = element.otrosColaboradores.split(",");
    miembrosF.push(...otherCollabsArr);
  }

  if (miembrosF.length < 1) {
    return "----";
  }

  return formatter.format(miembrosF);
};
---

<Layout title={miembro.response.nombreCompleto}>
  <main class="prose max-w-full p-4">
    <div
      class="stats md:grid-cols-2 shadow stats-vertical md:stats-horizontal w-full not-prose min-h-40"
    >
      <div class="stat flex flex-col md:inline-grid place-items-center place">
        <div class="stat-figure text-secondary size-40">
          {
            miembro.response?.imgPerfil && (
              <div class="avatar size-full">
                <div class="rounded-full">
                  <Image
                    src={miembro.response.imgPerfil}
                    alt={miembro.response.nombreCompleto}
                    class="aspect-square"
                    width={100}
                    height={100}
                    loading="eager"
                  />
                </div>
              </div>
            )
          }
          {
            !miembro.response?.imgPerfil && (
              <div class="avatar placeholder size-full">
                <div class="bg-neutral text-neutral-content rounded-full">
                  <span class="text-3xl">
                    {miembro.response.nombreCompleto.charAt(0)}
                  </span>
                </div>
              </div>
            )
          }
        </div>
        <div class="stat-value text-wrap text-center">
          {miembro.response.gradoEstudio}. {miembro.response.nombreCompleto}
        </div>
        <div class="stat-title">{miembro.response.puesto.toUpperCase()}</div>
        <div class="stat-desc text-wrap">
          {miembro.response.tipoMiembro.toUpperCase()}
        </div>
      </div>
      <div class="stat place-items-center">
        <div class="stat-figure text-primary">
          <i class="bi bi-share-fill text-2xl"></i>
        </div>
        <div class="stat-title">Información de contacto</div>
        <div
          class="stat-value text-base-content flex flex-wrap gap-4 text-wrap"
        >
          {
            miembro.response.contactos.length > 0 &&
              miembro.response.contactos.map((el) => (
                <a
                  class="hover:text-primary hover:scale-105 duration-100 ease-in"
                  href={`${el.tipo === "correo" ? "mailto:" : ""}${el.url}`}
                  target="_blank"
                >
                  <i class={redesSocialesIcon[el.tipo as keyof icons]} />
                </a>
              ))
          }
          {
            miembro.response.contactos.length < 1 && (
              <span>Sin información de contacto.</span>
            )
          }
        </div>
      </div>
    </div>
    <p class="text-justify">{miembro.response.resumen}</p>
    <h2 class="mt-0">Proyectos</h2>
    <div class="overflow-x-auto">
      <table class="table table-zebra text-balance not-prose">
        <!-- head -->
        <thead>
          <tr>
            <th class="w-40">Clave</th>
            <th>Proyecto</th>
            <th>Duración</th>
            <th>Director</th>
            <th>Colaboradores</th>
            <th>Tipo</th>
          </tr>
        </thead>
        <tbody>
          {
            miembro.response.proyectos.length > 0 &&
              miembro.response.proyectos.map((el: any) => (
                <tr>
                  <th>{el.clave}</th>
                  <td>{el.titulo}</td>
                  <td>
                    {`${formatDate(el.fechaInicio, "LL")} a ${formatDate(el.fechaTermino, "LL")}`}{" "}
                  </td>
                  <td>{getMiembro(el.director)}</td>
                  <td>{getCollabs(el) ?? "---"}</td>
                  <td>{el.tipo.toUpperCase()}</td>
                </tr>
              ))
          }
          {
            miembro.response.proyectos.length < 1 && (
              <tr>
                <th colspan="6" class="text-center text-xl">
                  Sin datos.
                </th>
              </tr>
            )
          }
        </tbody>
      </table>
    </div>
  </main>
</Layout>
